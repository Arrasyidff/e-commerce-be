// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  username String @db.VarChar(100)
  email String @db.VarChar(100) @unique
  password String @db.VarChar(255)
  role String @db.VarChar(20) @default("customer")
  created_at DateTime @default(now())

  carts Cart[]
  orders Order[]
  wishlists Wishlist[]

  @@map("users")
}

model Category {
  id String @id @default(uuid())
  name String @db.VarChar(100) @unique
  created_at DateTime @default(now())
  
  products Product[]

  @@map("categories")
}

model Product {
  id String @id @default(uuid())
  name String @db.VarChar(100)
  description String @db.Text
  price Decimal @db.Decimal(10, 2)
  stock Int @db.Integer @default(0)
  categoryId String?
  created_at DateTime @default(now())

  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  
  cartItems CartItem[]
  orderItems OrderItem[]
  wishlistItems wishlistItem[]

  @@map("products")
}

model Cart {
  id String @id @default(uuid())
  userId String @unique
  created_at DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartItems CartItem[]

  @@map("carts")
}

model CartItem {
  id String @id @default(uuid())
  cartId String
  productId String
  quantity Int @db.Integer
  created_at DateTime @default(now())

  cart Cart @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([cartId, productId])

  @@map("cart_items")
}

model Order {
  id String @id() @default(uuid())
  userId String
  totalAmount Decimal @db.Decimal(10, 2)
  status String @default("Pending") @db.VarChar(20)
  paymentMethod String @db.VarChar(100)
  created_at DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderItems OrderItem[]
  payments Payment[]

  @@map("orders")
}

model OrderItem {
  id String @id() @default(uuid())
  orderId String
  productId String
  quantity Int
  price Decimal @db.Decimal(10, 2)

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("order_items")
}

model Payment {
  id String @id() @default(uuid())
  orderId String
  paymentMethod String? @db.VarChar(50)
  status String @default("Pending") @db.VarChar(20)
  paid_at DateTime?
  created_at DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("payments")
}

model Wishlist {
  id String @id() @default(uuid())
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  wishlistItems wishlistItem[]

  @@map("wishlists")
}

model wishlistItem {
  id String @id() @default(uuid())
  wishlistId String
  productId String

  wishlist Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("wishlist_items")
}